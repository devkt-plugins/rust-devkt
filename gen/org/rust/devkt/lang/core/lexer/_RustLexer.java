/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.rust.devkt.lang.core.lexer;

import org.jetbrains.kotlin.com.intellij.lexer.*;
import org.jetbrains.kotlin.com.intellij.psi.tree.IElementType;

import static org.rust.devkt.lang.core.psi.RsElementTypes.*;
import static org.rust.devkt.lang.core.parser.RustParserDefinition.*;
import static org.jetbrains.kotlin.com.intellij.psi.TokenType.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>RustLexer.flex</tt>
 */
public class _RustLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INITIAL = 2;
  public static final int IN_BLOCK_COMMENT = 4;
  public static final int IN_LIFETIME_OR_CHAR = 6;
  public static final int IN_RAW_LITERAL = 8;
  public static final int IN_RAW_LITERAL_SUFFIX = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16864 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\24\1\56\1\57\5\21\2\24\1\60"+
    "\7\21\1\24\1\61\20\21\1\24\1\62\1\21\1\63\13\24\1\64\1\24\1\65\22\21\1\66"+
    "\5\21\1\67\11\21\1\70\1\71\1\72\1\73\1\21\1\74\2\21\1\75\3\21\1\76\2\21\1"+
    "\77\10\21\123\24\1\100\7\24\1\101\1\102\12\24\1\103\24\21\1\24\1\104\u0582"+
    "\21\1\105\u017f\21");

  /* The ZZ_CMAP_Y table has 4480 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\4"+
    "\0\1\17\1\20\1\17\2\7\1\21\3\7\1\21\71\7\1\22\1\7\1\23\1\0\1\24\1\25\2\0\16"+
    "\26\1\27\1\30\1\31\1\32\2\7\1\33\11\7\1\34\21\7\1\35\1\36\24\7\1\37\3\7\1"+
    "\21\1\40\1\37\4\7\1\0\1\41\4\26\1\42\1\43\1\0\3\7\2\44\3\0\1\26\1\45\5\7\1"+
    "\46\3\26\1\47\1\50\13\7\1\51\1\52\1\53\1\54\1\26\1\55\2\0\1\56\3\7\3\26\1"+
    "\57\12\7\1\60\1\26\1\61\1\0\1\26\1\62\3\7\1\46\1\63\1\17\2\7\1\60\1\64\1\65"+
    "\1\66\2\0\3\7\1\67\10\0\2\7\1\27\1\70\2\0\1\71\1\26\1\72\3\26\1\73\6\7\1\74"+
    "\2\26\1\75\1\7\1\76\1\26\1\37\1\7\1\77\1\100\1\101\2\7\1\102\1\103\1\104\1"+
    "\52\1\105\1\106\1\107\1\76\1\26\1\23\1\0\1\110\1\111\1\101\2\7\1\102\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\26\1\121\1\0\1\110\1\34\1\33\2\7\1"+
    "\102\1\122\1\104\1\42\1\123\1\124\1\0\1\76\1\26\1\0\1\40\1\110\1\100\1\101"+
    "\2\7\1\102\1\122\1\104\1\52\1\115\1\120\1\107\1\76\1\26\1\40\1\0\1\125\1\126"+
    "\1\127\1\130\1\131\1\126\1\7\1\132\1\133\1\134\1\135\1\0\1\120\1\26\2\0\1"+
    "\136\1\27\1\102\2\7\1\102\1\7\1\137\1\140\1\134\1\141\1\44\1\76\1\26\2\0\1"+
    "\77\1\27\1\102\2\7\1\102\1\142\1\104\1\140\1\134\1\141\1\143\1\76\1\26\1\144"+
    "\1\0\1\110\1\27\1\102\4\7\1\145\1\140\1\146\1\147\1\150\1\76\1\26\1\0\1\36"+
    "\1\151\1\7\1\21\1\36\2\7\1\33\1\152\1\21\1\153\1\154\1\26\1\120\1\26\1\155"+
    "\1\0\1\37\5\7\1\156\1\45\1\157\1\160\1\26\1\161\4\0\1\162\1\163\1\164\1\37"+
    "\1\165\1\166\1\156\1\167\1\170\1\171\1\26\1\172\4\0\1\124\2\0\1\161\1\26\1"+
    "\161\1\173\1\174\1\7\1\37\3\7\1\24\1\41\1\26\1\140\1\175\1\26\1\41\3\26\1"+
    "\176\1\177\7\0\5\7\1\46\1\26\1\200\1\26\1\161\1\60\1\201\1\202\1\203\1\204"+
    "\1\7\1\205\1\206\1\26\1\171\4\7\1\34\1\207\5\7\1\210\51\7\1\127\1\21\1\127"+
    "\5\7\1\127\4\7\1\127\1\21\1\127\1\7\1\21\7\7\1\127\10\7\1\211\1\0\1\41\1\161"+
    "\1\0\2\7\2\0\12\7\2\70\1\37\114\7\1\100\2\7\1\37\2\7\1\44\11\7\1\126\1\7\1"+
    "\124\1\7\1\27\1\212\1\0\2\7\1\212\1\0\2\7\1\213\1\0\1\7\1\27\1\214\1\0\6\7"+
    "\1\215\3\26\1\216\1\217\1\26\1\161\3\0\1\220\1\26\1\161\13\7\1\0\5\7\1\221"+
    "\10\7\1\70\1\0\3\7\1\21\1\26\1\222\1\26\1\222\1\120\1\26\3\7\1\70\1\24\1\0"+
    "\5\7\1\223\3\7\1\23\1\26\1\45\4\0\2\7\1\157\1\222\6\7\1\175\1\160\3\26\1\52"+
    "\1\26\1\161\1\26\1\161\1\150\1\0\1\26\1\171\10\0\1\224\5\7\1\215\1\26\1\224"+
    "\1\223\1\26\1\161\1\0\1\225\1\222\1\0\1\226\3\7\1\75\1\203\1\26\1\62\4\7\1"+
    "\60\1\26\1\222\1\0\4\7\1\215\2\26\1\0\1\26\1\227\1\26\1\62\3\7\1\70\1\7\1"+
    "\124\10\0\1\230\2\26\1\231\1\232\1\161\30\7\6\26\1\171\1\225\42\7\2\70\4\7"+
    "\2\70\1\7\1\233\3\7\1\70\6\7\1\27\1\170\1\234\1\24\1\235\1\223\1\7\1\24\1"+
    "\234\1\24\5\0\1\236\1\0\1\106\1\237\1\0\1\240\3\0\1\40\1\150\2\0\1\7\1\24"+
    "\6\0\1\26\1\176\1\241\1\26\1\237\1\0\1\242\1\36\1\152\1\70\1\25\1\102\1\7"+
    "\1\243\1\244\1\245\2\0\5\7\1\124\116\0\5\7\1\21\5\7\1\21\20\7\1\24\1\246\1"+
    "\247\1\0\4\7\1\34\1\207\7\7\1\150\1\0\1\106\2\7\1\21\1\0\10\21\4\26\1\244"+
    "\3\0\1\37\1\205\1\250\1\24\1\37\11\7\1\21\1\251\1\37\12\7\1\210\1\244\4\7"+
    "\1\70\1\37\12\7\1\21\2\0\3\7\1\44\6\0\170\7\1\70\11\0\72\7\1\70\5\0\21\7\1"+
    "\24\10\0\5\7\1\70\41\7\1\24\2\7\1\26\1\247\2\0\5\7\1\157\1\71\1\252\3\7\1"+
    "\60\12\7\1\161\3\0\1\150\1\7\1\36\14\7\1\101\3\7\1\21\1\7\7\0\1\150\1\7\1"+
    "\253\1\254\2\7\1\46\3\0\6\7\1\223\1\0\1\62\5\7\1\215\1\26\1\171\1\0\1\26\1"+
    "\161\2\26\1\62\1\255\1\26\1\62\2\7\1\60\1\171\2\7\1\157\1\26\1\222\1\0\3\7"+
    "\1\24\1\73\5\7\1\46\1\26\1\237\1\150\1\26\1\161\1\256\1\7\1\26\1\257\5\7\1"+
    "\75\1\160\1\0\1\254\1\260\1\26\1\161\2\7\1\21\1\261\6\7\1\202\1\262\1\221"+
    "\2\0\1\263\1\7\1\46\1\264\1\0\3\265\1\0\2\21\5\7\1\210\1\70\1\0\16\7\1\46"+
    "\1\266\1\26\1\161\64\7\1\223\1\0\2\7\1\21\1\267\5\7\1\223\40\0\55\7\1\70\15"+
    "\7\1\23\4\0\1\21\1\0\1\267\1\270\1\7\1\102\1\21\1\170\1\271\15\7\1\23\3\0"+
    "\1\267\20\7\1\70\1\164\32\7\1\70\2\0\10\7\1\36\6\7\5\0\1\7\1\23\2\26\2\0\2"+
    "\26\1\272\2\0\1\273\4\0\1\274\1\233\17\7\1\24\2\0\1\26\1\161\1\37\2\7\1\275"+
    "\1\37\2\7\1\44\1\276\6\7\1\60\3\7\1\21\3\36\1\277\4\0\1\7\1\142\2\7\1\21\2"+
    "\7\1\300\1\7\1\70\1\7\1\70\4\0\17\7\1\44\10\0\6\7\1\24\20\0\1\301\20\0\3\7"+
    "\1\24\6\7\1\124\1\0\1\237\3\0\4\7\2\0\3\7\1\44\4\7\1\60\1\45\3\7\1\70\4\7"+
    "\1\223\1\7\1\250\5\0\23\7\1\70\1\26\1\161\4\7\1\223\4\7\1\223\5\7\1\0\6\7"+
    "\1\223\23\0\46\7\1\21\1\0\2\7\1\70\1\0\1\7\23\0\1\70\1\102\4\7\1\34\1\302"+
    "\2\7\1\70\1\0\2\7\1\21\1\0\3\7\1\21\10\0\2\7\1\303\1\0\2\7\1\70\1\0\3\7\1"+
    "\23\10\0\7\7\1\276\10\0\1\304\1\71\1\142\1\37\2\7\1\223\1\114\4\0\3\7\1\24"+
    "\3\7\1\24\4\0\1\7\1\37\2\7\1\305\3\0\6\7\1\70\1\0\2\7\1\70\1\0\2\7\1\44\1"+
    "\0\2\7\1\23\15\0\11\7\1\124\6\0\6\7\1\44\1\0\6\7\1\44\41\0\1\226\6\7\1\26"+
    "\1\160\3\0\1\120\1\26\1\0\1\106\1\226\5\7\1\26\1\45\2\0\3\7\1\124\1\26\1\161"+
    "\1\226\3\7\1\157\1\26\1\140\1\26\2\0\4\7\1\306\1\0\1\226\5\7\1\46\1\26\1\307"+
    "\1\310\1\26\1\311\4\0\2\7\1\33\2\7\1\215\1\26\1\177\10\0\1\21\1\312\1\7\1"+
    "\34\1\7\1\124\5\7\1\157\1\26\1\45\1\26\1\161\1\136\1\100\1\101\2\7\1\102\1"+
    "\122\1\104\1\52\1\115\1\135\1\244\1\76\2\176\21\0\6\7\1\175\1\26\1\200\1\44"+
    "\1\26\1\161\4\0\6\7\2\26\1\313\1\0\1\26\1\161\24\0\5\7\1\157\1\171\1\26\1"+
    "\237\2\0\1\260\4\0\6\7\2\26\1\314\1\0\1\26\1\161\4\0\5\7\1\46\1\26\1\0\1\26"+
    "\1\161\6\0\3\7\1\315\1\26\1\222\1\26\1\161\54\0\10\7\1\26\1\161\1\0\1\150"+
    "\70\0\7\7\1\124\40\0\1\7\1\102\3\7\1\157\1\160\1\26\1\124\1\0\1\26\1\161\2"+
    "\0\1\36\3\7\1\316\2\26\1\41\1\160\51\0\63\7\1\23\14\0\15\7\1\21\2\0\30\7\1"+
    "\223\27\0\5\7\1\21\72\0\10\7\1\21\67\0\7\7\1\124\3\7\1\21\1\26\1\161\14\0"+
    "\3\7\1\70\1\176\1\0\6\7\1\160\1\0\1\223\1\0\1\26\1\161\1\267\2\7\1\244\2\7"+
    "\56\0\10\7\1\24\1\0\1\75\4\26\1\160\1\0\1\106\1\226\1\7\10\0\1\124\3\0\75"+
    "\7\1\24\2\0\36\7\1\44\41\0\1\23\77\0\15\7\1\44\1\7\1\24\1\7\1\124\1\7\1\317"+
    "\130\0\1\273\1\320\1\45\1\225\1\321\1\222\3\0\1\322\22\0\1\310\67\0\12\7\1"+
    "\27\10\7\1\27\1\323\1\324\1\7\1\325\1\142\7\7\1\34\1\326\2\27\3\7\1\327\1"+
    "\170\1\36\1\102\51\7\1\70\3\7\1\102\2\7\1\210\3\7\1\210\2\7\1\27\3\7\1\27"+
    "\2\7\1\21\3\7\1\21\3\7\1\102\3\7\1\102\2\7\1\210\1\330\14\26\1\160\1\225\5"+
    "\26\1\176\1\301\1\0\1\240\2\0\1\225\1\41\1\26\52\0\1\160\2\26\1\331\1\332"+
    "\1\45\72\0\30\7\1\24\1\0\1\160\5\0\10\7\1\215\1\45\1\26\1\161\24\0\1\142\3"+
    "\7\1\162\1\37\1\210\1\333\1\242\1\334\1\162\1\233\1\162\2\210\1\117\1\7\1"+
    "\33\1\7\1\223\1\335\1\33\1\7\1\223\50\0\32\7\1\21\5\0\106\7\1\24\1\0\33\7"+
    "\1\70\120\7\1\23\53\0\3\7\1\70\134\0\36\26\2\0");

  /* The ZZ_CMAP_A table has 1776 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\2\30\1\2\2\0\1\3\1\27\1\25\1\31\1\54\1\50\1\44\1\20\1\34\1\35"+
    "\1\47\1\42\1\40\1\7\1\12\1\26\12\11\1\36\1\37\1\45\1\41\1\51\1\52\1\53\4\15"+
    "\1\6\1\15\14\4\1\77\7\4\1\32\1\21\1\33\1\46\1\10\1\0\1\55\1\17\1\61\1\70\1"+
    "\66\1\13\1\64\1\76\1\63\1\4\1\75\1\62\1\67\1\65\1\16\1\72\1\4\1\60\1\56\1"+
    "\57\1\22\1\71\1\100\1\14\1\74\1\73\1\23\1\43\1\24\7\0\1\30\4\0\1\4\12\0\1"+
    "\4\1\0\1\5\7\4\1\0\2\4\4\0\4\4\6\0\5\4\7\0\1\4\1\0\1\4\1\0\10\5\5\4\1\0\2"+
    "\4\3\0\3\4\1\0\1\4\6\0\1\4\1\5\3\4\1\0\1\4\1\0\4\4\1\0\13\4\1\0\3\4\1\0\5"+
    "\5\2\0\6\4\1\0\7\4\1\0\1\4\7\0\15\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\1\5\3\4\5"+
    "\0\3\5\5\0\3\4\7\5\4\0\2\4\1\5\13\4\1\0\1\4\7\5\2\0\6\5\2\4\2\5\1\0\4\5\2"+
    "\4\2\5\3\4\2\0\2\4\1\5\6\4\3\5\2\0\11\4\3\5\1\4\6\0\2\5\6\4\4\5\2\4\2\0\2"+
    "\5\1\4\11\5\1\4\3\5\1\4\5\5\2\0\1\4\3\5\4\0\6\4\6\0\6\5\1\0\11\5\6\4\3\5\1"+
    "\4\2\5\1\4\7\5\2\4\2\5\2\0\2\5\1\4\3\5\1\0\10\4\2\0\2\4\2\0\6\4\1\0\7\4\1"+
    "\0\1\4\3\0\4\4\2\0\1\5\1\4\3\5\2\0\3\5\1\4\10\0\1\5\4\0\2\4\1\0\1\4\1\0\3"+
    "\5\1\0\6\4\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5"+
    "\3\0\1\5\7\0\4\4\1\0\1\4\7\0\4\5\3\4\1\5\2\0\1\4\1\0\2\4\1\0\3\4\2\5\1\0\3"+
    "\5\2\0\1\4\11\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3"+
    "\0\2\4\3\0\2\4\4\0\5\5\3\0\3\5\1\0\4\5\2\0\1\4\6\0\5\5\1\0\5\4\3\0\1\4\7\5"+
    "\1\0\2\5\5\0\2\5\1\0\4\4\1\0\3\4\6\0\1\4\2\0\2\4\5\0\3\4\2\0\1\4\3\5\1\0\4"+
    "\5\1\4\5\0\3\4\1\5\7\0\1\4\2\0\2\5\1\0\7\4\1\0\1\4\4\0\1\5\4\0\6\5\1\0\1\5"+
    "\3\0\2\5\4\0\1\4\1\5\1\4\5\5\7\4\10\5\1\0\2\5\7\0\2\4\1\0\1\4\2\0\2\4\1\0"+
    "\1\4\2\0\1\4\6\0\4\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4\2\5\1\0\2\5\1"+
    "\4\2\0\5\4\1\0\1\4\1\0\6\5\2\0\2\5\2\0\4\4\5\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5"+
    "\5\4\10\5\11\0\1\5\1\0\7\5\1\4\2\5\4\4\3\5\1\4\3\5\2\4\7\5\3\4\4\5\5\4\14"+
    "\5\1\4\1\5\5\0\1\4\2\0\3\4\1\0\7\4\2\0\3\5\2\4\3\5\3\0\2\4\2\5\4\0\1\4\1\0"+
    "\2\5\4\0\4\4\10\5\3\0\1\4\4\0\1\4\1\5\5\0\3\5\2\0\1\4\1\5\1\4\5\0\4\5\4\0"+
    "\4\4\4\0\5\5\3\4\3\0\10\5\5\4\2\5\3\0\3\4\3\5\1\0\5\5\4\4\1\5\4\4\3\5\2\4"+
    "\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\2\0\3\4\1\0\6\4\2\0\2\4\2\30\6\0\1\5\13\0"+
    "\1\5\4\0\1\5\3\0\3\5\2\0\1\4\4\0\3\4\2\0\4\4\5\0\5\4\4\0\1\4\4\0\4\4\3\5\2"+
    "\4\5\0\5\4\3\0\2\5\2\0\3\4\6\5\1\0\3\4\1\5\3\4\1\5\4\4\1\5\4\4\3\0\1\4\1\0"+
    "\1\4\2\0\5\4\1\5\2\4\2\5\5\4\1\0\4\4\2\5\4\0\1\4\3\5\2\4\1\5\5\4\2\5\3\0\3"+
    "\4\4\0\3\4\2\5\2\0\6\4\1\0\3\5\1\0\2\5\5\0\5\4\5\0\1\4\1\5\3\4\1\0\2\4\1\0"+
    "\2\4\3\0\2\5\10\0\3\5\1\0\1\4\1\0\1\4\3\0\4\4\4\0\1\5\6\0\2\4\2\0\3\4\3\0"+
    "\3\4\1\0\2\4\1\0\1\4\5\0\1\5\2\0\1\4\3\0\1\4\2\0\4\4\1\0\2\4\2\0\1\4\3\5\1"+
    "\0\2\5\1\0\5\4\2\5\1\0\3\4\1\5\2\0\1\4\1\0\1\5\4\4\5\0\3\5\3\0\2\5\1\4\1\0"+
    "\1\4\3\0\1\4\1\0\4\4\1\0\1\4\4\5\2\4\1\0\1\4\1\5\3\0\1\4\3\0\2\4\3\0\3\5\2"+
    "\0\6\5\2\4\3\0\2\5\1\0\2\5\3\0\6\5\2\0\3\5\2\0\4\5\4\0\1\4\2\0\2\4\2\0\4\4"+
    "\1\0\4\4\1\0\1\4\1\0\6\4\2\0\5\4\1\0\4\4\1\0\4\4\2\0\3\5\2\0\7\5\1\0\2\5\1"+
    "\0\2\5\1\0\1\4\1\0\1\4\5\0\1\4\1\0\1\4\1\0\3\4\1\0\3\4\1\0\3\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\2\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\3\4\1\11\1\4\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\17\4\3\43\1\44"+
    "\1\45\1\46\1\47\2\0\1\50\1\51\3\7\1\0"+
    "\1\52\1\53\3\4\1\54\3\4\1\55\1\56\4\4"+
    "\2\14\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\4\1\74"+
    "\7\4\1\75\1\0\5\4\1\76\1\77\7\4\1\100"+
    "\6\4\1\101\1\102\1\44\1\103\3\44\1\104\1\105"+
    "\2\0\1\52\1\106\1\52\1\107\1\110\1\111\4\4"+
    "\1\112\4\55\2\56\1\113\1\0\2\4\1\114\1\4"+
    "\1\14\1\57\1\115\1\116\12\4\1\117\4\4\1\120"+
    "\4\4\1\121\1\4\1\122\3\4\1\123\7\4\1\44"+
    "\1\103\1\0\3\44\1\115\3\52\3\4\1\55\1\0"+
    "\3\55\1\56\4\4\1\115\4\0\6\4\1\124\1\125"+
    "\1\4\1\126\4\4\1\127\1\130\1\4\1\131\1\132"+
    "\1\133\4\4\1\134\2\4\1\0\2\4\1\0\1\135"+
    "\2\4\2\0\1\4\1\136\3\4\1\137\1\4\1\140"+
    "\1\4\1\141\1\4\1\142\1\143\1\144\1\145\1\44"+
    "\1\4\1\55\1\146\2\0\1\4\1\147\1\150\1\151"+
    "\1\4\1\152\2\4\1\153";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0186\0\u0208\0\u0249\0\u028a\0\u02cb\0\u028a\0\u030c\0\u034d"+
    "\0\u038e\0\u03cf\0\u0410\0\u0186\0\u0451\0\u0186\0\u0186\0\u0492"+
    "\0\u04d3\0\u0514\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0555"+
    "\0\u0186\0\u0186\0\u0596\0\u05d7\0\u0618\0\u0659\0\u0186\0\u069a"+
    "\0\u06db\0\u071c\0\u0186\0\u0186\0\u0186\0\u0186\0\u075d\0\u079e"+
    "\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6"+
    "\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0186\0\u0b2c\0\u0b6d"+
    "\0\u0bae\0\u0bef\0\u0186\0\u0c30\0\u0c71\0\u0cb2\0\u0186\0\u0186"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba"+
    "\0\u0efb\0\u028a\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081"+
    "\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u0186\0\u0186"+
    "\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186"+
    "\0\u0186\0\u0186\0\u1248\0\u028a\0\u1289\0\u12ca\0\u130b\0\u134c"+
    "\0\u138d\0\u13ce\0\u140f\0\u0186\0\u1450\0\u1491\0\u14d2\0\u1513"+
    "\0\u1554\0\u1595\0\u028a\0\u028a\0\u15d6\0\u1617\0\u1658\0\u1699"+
    "\0\u16da\0\u171b\0\u175c\0\u028a\0\u179d\0\u17de\0\u181f\0\u1860"+
    "\0\u18a1\0\u18e2\0\u0186\0\u0186\0\u1923\0\u1964\0\u19a5\0\u19e6"+
    "\0\u1a27\0\u1a68\0\u0186\0\u1aa9\0\u1aea\0\u1b2b\0\u0186\0\u1b6c"+
    "\0\u0186\0\u0186\0\u028a\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u028a"+
    "\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u0186\0\u1e37"+
    "\0\u1e78\0\u1eb9\0\u028a\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe"+
    "\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206"+
    "\0\u2247\0\u2288\0\u028a\0\u22c9\0\u230a\0\u234b\0\u238c\0\u028a"+
    "\0\u23cd\0\u240e\0\u244f\0\u2490\0\u028a\0\u24d1\0\u028a\0\u2512"+
    "\0\u2553\0\u2594\0\u028a\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9"+
    "\0\u271a\0\u275b\0\u0186\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0"+
    "\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u0186"+
    "\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f"+
    "\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77"+
    "\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u028a\0\u028a\0\u2fbc\0\u2f7b"+
    "\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u028a\0\u028a\0\u3101\0\u028a"+
    "\0\u028a\0\u028a\0\u3142\0\u3183\0\u31c4\0\u3205\0\u028a\0\u3246"+
    "\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u028a\0\u33cc\0\u340d"+
    "\0\u344e\0\u348f\0\u34d0\0\u028a\0\u3511\0\u3552\0\u3593\0\u028a"+
    "\0\u35d4\0\u028a\0\u3615\0\u028a\0\u3656\0\u028a\0\u028a\0\u028a"+
    "\0\u028a\0\u3697\0\u36d8\0\u3719\0\u028a\0\u375a\0\u379b\0\u37dc"+
    "\0\u028a\0\u028a\0\u028a\0\u381d\0\u028a\0\u385e\0\u389f\0\u028a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\31\7\1\10\47\7\1\11\2\12\1\13\1\14\1\11"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\14\1\22"+
    "\1\23\1\24\1\11\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\11\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\2\14\1\66\1\67"+
    "\1\70\1\71\1\72\1\14\1\73\2\14\1\74\1\75"+
    "\26\76\1\77\20\76\1\100\31\76\20\11\1\101\60\11"+
    "\25\76\1\102\53\76\4\103\1\104\1\103\1\104\1\103"+
    "\1\104\2\103\5\104\2\103\1\104\32\103\24\104\130\0"+
    "\1\105\52\0\3\12\76\0\2\12\1\13\22\0\1\106"+
    "\56\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\24\14\41\0\1\107\7\0\1\110\33\0\1\111"+
    "\1\0\1\112\1\0\1\113\1\17\1\114\1\115\4\111"+
    "\2\0\1\111\32\0\11\111\1\112\12\111\12\0\1\116"+
    "\72\0\3\14\1\0\2\14\1\0\3\14\1\117\1\14"+
    "\2\0\1\14\32\0\1\120\5\14\1\121\1\14\1\122"+
    "\13\14\4\0\3\14\1\0\2\14\1\0\1\123\4\14"+
    "\2\0\1\14\32\0\14\14\1\124\7\14\4\0\3\14"+
    "\1\0\2\14\1\0\3\14\1\125\1\14\1\126\1\0"+
    "\1\14\2\0\1\127\27\0\3\14\1\130\5\14\1\131"+
    "\12\14\4\0\3\14\1\0\2\14\1\0\5\14\2\0"+
    "\1\14\32\0\1\14\1\132\6\14\1\133\13\14\21\30"+
    "\1\134\3\30\1\135\53\30\26\0\1\136\12\0\1\137"+
    "\5\0\1\140\72\0\1\141\75\0\1\142\103\0\1\143"+
    "\7\0\1\144\70\0\1\145\100\0\1\146\100\0\1\147"+
    "\100\0\1\150\100\0\1\151\100\0\1\152\43\0\3\14"+
    "\1\0\2\14\1\0\4\14\1\153\2\0\1\14\32\0"+
    "\1\14\1\154\3\14\1\155\16\14\4\0\3\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\156\32\0\2\14\1\157"+
    "\3\14\1\160\2\14\1\161\12\14\4\0\3\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\14\32\0\3\14\1\162"+
    "\13\14\1\163\4\14\4\0\3\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\14\2\0\1\164\3\0\1\165\23\0"+
    "\11\14\1\166\12\14\4\0\3\14\1\0\2\14\1\0"+
    "\3\14\1\167\1\14\2\0\1\14\32\0\3\14\1\170"+
    "\20\14\4\0\3\14\1\0\2\14\1\0\3\14\1\171"+
    "\1\14\2\0\1\14\32\0\11\14\1\172\12\14\4\0"+
    "\3\14\1\0\2\14\1\0\1\173\4\14\2\0\1\14"+
    "\32\0\10\14\1\174\1\14\1\175\11\14\4\0\3\14"+
    "\1\0\2\14\1\0\1\14\1\176\3\14\2\0\1\14"+
    "\32\0\5\14\1\177\2\14\1\200\13\14\4\0\3\14"+
    "\1\0\2\14\1\0\3\14\1\201\1\14\2\0\1\202"+
    "\32\0\1\203\23\14\4\0\3\14\1\0\2\14\1\0"+
    "\3\14\1\204\1\14\2\0\1\14\32\0\24\14\4\0"+
    "\3\14\1\0\2\14\1\0\5\14\2\0\1\14\32\0"+
    "\6\14\1\205\15\14\4\0\3\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\206\32\0\3\14\1\207\20\14\4\0"+
    "\3\14\1\0\2\14\1\0\5\14\2\0\1\14\32\0"+
    "\6\14\1\210\15\14\4\0\3\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\14\32\0\11\14\1\211\12\14\4\0"+
    "\3\14\1\0\2\14\1\0\5\14\2\0\1\14\32\0"+
    "\21\14\1\212\2\14\47\0\1\213\57\0\1\214\52\0"+
    "\1\215\2\0\1\215\1\216\1\217\1\216\1\215\1\216"+
    "\1\217\1\215\5\216\1\220\1\221\1\216\32\215\24\216"+
    "\31\0\1\102\53\0\3\104\1\0\2\104\1\0\5\104"+
    "\2\0\1\104\32\0\24\104\1\222\2\223\27\222\1\0"+
    "\46\222\26\0\1\224\56\0\3\111\1\0\2\111\1\0"+
    "\5\111\2\0\1\111\32\0\24\111\4\0\3\111\1\225"+
    "\2\226\1\0\5\111\2\0\1\111\17\0\1\225\12\0"+
    "\24\111\4\0\2\111\1\112\1\0\2\113\1\114\1\115"+
    "\4\111\2\0\1\111\32\0\11\111\1\112\12\111\4\227"+
    "\1\0\1\227\1\0\2\227\1\230\6\0\2\227\1\0"+
    "\32\227\30\0\3\115\1\0\2\115\1\0\5\115\2\0"+
    "\1\115\32\0\24\115\12\0\1\231\26\0\1\232\43\0"+
    "\3\14\1\0\2\14\1\0\5\14\2\0\1\14\32\0"+
    "\3\14\1\233\20\14\4\0\3\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\14\32\0\5\14\1\234\16\14\4\0"+
    "\3\14\1\0\2\14\1\0\5\14\2\0\1\14\32\0"+
    "\10\14\1\235\13\14\4\0\3\14\1\0\2\14\1\0"+
    "\1\236\4\14\2\0\1\14\32\0\24\14\4\0\3\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\14\32\0\11\14"+
    "\1\237\12\14\4\0\3\14\1\0\2\14\1\0\1\14"+
    "\1\240\3\14\2\0\1\14\32\0\24\14\1\241\2\0"+
    "\1\241\3\242\1\241\2\242\1\241\5\242\1\243\1\244"+
    "\1\242\32\241\24\242\21\127\1\245\3\127\1\246\53\127"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\2\0\1\247\3\0\1\250\23\0\11\14\1\251\12\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\4\14\1\252\17\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\11\14\1\253\12\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\1\14\1\254\22\14\101\30\4\0\1\255\1\0"+
    "\1\255\1\0\1\255\2\0\5\255\2\0\1\255\32\0"+
    "\24\255\1\256\2\0\23\256\1\257\1\260\1\0\50\256"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\1\14\1\261\22\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\6\14\1\262\15\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\15\14\1\263\6\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\1\264\2\14\1\265"+
    "\20\14\4\0\3\14\1\0\2\14\1\0\5\14\2\0"+
    "\1\14\32\0\16\14\1\266\5\14\4\0\3\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\14\32\0\5\14\1\267"+
    "\16\14\4\0\3\14\1\0\2\14\1\0\5\14\2\0"+
    "\1\270\32\0\1\271\23\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\15\14\1\272\6\14"+
    "\25\0\1\164\3\0\1\165\53\0\3\14\1\0\2\14"+
    "\1\0\1\273\4\14\2\0\1\14\32\0\2\14\1\274"+
    "\21\14\4\0\3\14\1\0\2\14\1\0\5\14\2\0"+
    "\1\14\32\0\10\14\1\275\13\14\4\0\3\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\14\32\0\1\276\23\14"+
    "\4\0\3\14\1\0\2\14\1\0\3\14\1\277\1\14"+
    "\2\0\1\14\32\0\24\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\2\14\1\300\21\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\15\14\1\301\6\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\2\14\1\302\21\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\1\14\1\303\22\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\304\32\0\24\14\4\0\3\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\14\32\0\13\14"+
    "\1\305\1\306\7\14\4\0\3\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\14\32\0\2\14\1\307\21\14\4\0"+
    "\3\14\1\0\2\14\1\0\5\14\2\0\1\14\32\0"+
    "\2\14\1\310\1\14\1\311\17\14\4\0\3\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\14\32\0\3\14\1\312"+
    "\20\14\4\0\3\14\1\0\2\14\1\0\4\14\1\313"+
    "\2\0\1\14\32\0\3\14\1\314\20\14\4\0\3\14"+
    "\1\0\2\14\1\0\3\14\1\315\1\14\2\0\1\14"+
    "\32\0\6\14\1\316\15\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\11\14\1\317\12\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\5\14\1\320\16\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\6\14\1\321\2\14"+
    "\1\322\12\14\20\0\1\220\1\323\63\0\3\324\1\0"+
    "\2\324\1\0\5\324\1\220\1\323\1\324\32\0\24\324"+
    "\4\0\3\325\1\0\2\325\1\0\5\325\1\220\1\323"+
    "\1\325\32\0\24\325\4\0\1\326\1\0\1\326\1\0"+
    "\1\326\2\0\5\326\2\0\1\326\32\0\24\326\1\215"+
    "\2\0\11\215\1\327\5\215\1\330\56\215\1\222\2\0"+
    "\76\222\26\0\1\331\1\260\61\0\2\332\73\0\1\115"+
    "\1\111\1\115\1\0\1\115\1\226\1\0\5\115\2\0"+
    "\1\115\32\0\24\115\4\0\1\115\1\0\1\333\1\0"+
    "\1\334\1\230\1\0\5\115\2\0\1\115\32\0\11\115"+
    "\1\333\12\115\4\0\3\14\1\0\2\14\1\0\5\14"+
    "\2\0\1\14\32\0\1\14\1\270\22\14\4\0\3\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\14\32\0\1\335"+
    "\23\14\4\0\3\14\1\0\2\14\1\0\5\14\2\0"+
    "\1\14\32\0\1\14\1\336\22\14\4\0\3\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\14\32\0\3\14\1\337"+
    "\20\14\20\0\1\243\1\340\63\0\3\341\1\0\2\341"+
    "\1\0\5\341\1\243\1\340\1\341\32\0\24\341\4\0"+
    "\1\342\1\0\1\342\1\0\1\342\2\0\5\342\2\0"+
    "\1\342\32\0\24\342\1\241\2\0\11\241\1\343\5\241"+
    "\1\344\56\241\101\127\4\0\1\345\1\0\1\345\1\0"+
    "\1\345\2\0\5\345\2\0\1\345\32\0\24\345\25\0"+
    "\1\247\3\0\1\250\53\0\3\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\14\32\0\1\346\23\14\4\0\3\14"+
    "\1\0\2\14\1\0\3\14\1\347\1\14\2\0\1\14"+
    "\32\0\24\14\4\0\3\14\1\0\2\14\1\0\5\14"+
    "\2\0\1\14\32\0\1\350\5\14\1\351\15\14\4\0"+
    "\3\255\1\0\2\255\1\0\5\255\2\0\1\255\32\0"+
    "\24\255\1\256\2\0\25\256\1\0\50\256\1\352\1\353"+
    "\1\354\23\352\1\256\1\352\1\0\50\352\1\260\1\355"+
    "\1\356\25\260\1\0\50\260\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\2\14\1\357\21\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\7\14\1\360\14\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\11\14\1\361\12\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\2\14\1\362\21\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\363\32\0\24\14\4\0\3\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\14\32\0\11\14"+
    "\1\364\12\14\4\0\3\14\1\0\2\14\1\0\1\365"+
    "\4\14\2\0\1\14\32\0\24\14\4\0\3\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\14\32\0\11\14\1\366"+
    "\12\14\4\0\3\14\1\0\2\14\1\0\5\14\2\0"+
    "\1\14\32\0\6\14\1\367\15\14\4\0\3\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\14\32\0\11\14\1\370"+
    "\12\14\4\0\3\14\1\0\2\14\1\0\5\14\2\0"+
    "\1\371\32\0\24\14\4\0\3\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\14\32\0\1\14\1\372\1\373\21\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\2\14\1\374\21\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\15\14\1\375\6\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\5\14\1\376\16\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\11\14\1\377\12\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\11\14\1\u0100\12\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\12\14\1\u0101\11\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\11\14\1\u0102\12\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\4\14\1\u0103\17\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\3\14\1\u0104\20\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\2\14\1\u0105\21\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\11\14\1\204\12\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\4\14\1\204\17\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\14\14\1\204\7\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\5\14\1\u0106\16\14"+
    "\4\0\3\14\1\0\2\14\1\0\1\u0107\4\14\2\0"+
    "\1\14\32\0\24\14\4\0\3\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\14\32\0\5\14\1\u0108\16\14\4\0"+
    "\3\14\1\0\2\14\1\0\5\14\2\0\1\14\32\0"+
    "\3\14\1\u0109\20\14\4\0\3\324\1\0\2\324\1\0"+
    "\5\324\1\220\1\0\1\324\32\0\24\324\4\0\3\325"+
    "\1\0\2\325\1\0\5\325\1\220\1\0\1\325\32\0"+
    "\24\325\4\0\3\326\1\0\2\326\1\0\5\326\2\0"+
    "\1\326\32\0\24\326\6\0\1\327\2\0\1\327\1\0"+
    "\1\327\1\0\1\327\1\0\1\327\1\220\1\323\33\0"+
    "\1\327\3\0\1\327\4\0\1\327\1\0\1\327\30\0"+
    "\1\220\1\323\1\0\1\u010a\55\0\1\352\1\353\1\354"+
    "\23\352\1\0\1\352\1\0\50\352\4\0\1\115\1\0"+
    "\1\115\1\0\1\115\1\332\1\0\5\115\2\0\1\115"+
    "\32\0\24\115\4\0\3\115\1\225\2\115\1\0\5\115"+
    "\2\0\1\115\17\0\1\225\12\0\24\115\4\0\2\115"+
    "\1\333\1\0\2\334\1\0\5\115\2\0\1\115\32\0"+
    "\11\115\1\333\12\115\4\0\3\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\14\32\0\5\14\1\204\16\14\4\0"+
    "\3\14\1\0\2\14\1\0\5\14\2\0\1\14\32\0"+
    "\11\14\1\u010b\12\14\4\0\3\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\14\32\0\3\14\1\u010c\20\14\4\0"+
    "\3\341\1\0\2\341\1\0\5\341\1\243\1\0\1\341"+
    "\32\0\24\341\4\0\3\342\1\0\2\342\1\0\5\342"+
    "\2\0\1\342\32\0\24\342\6\0\1\343\2\0\1\343"+
    "\1\0\1\343\1\0\1\343\1\0\1\343\1\243\1\340"+
    "\33\0\1\343\3\0\1\343\4\0\1\343\1\0\1\343"+
    "\30\0\1\243\1\340\1\0\1\u010d\61\0\3\345\1\0"+
    "\2\345\1\0\5\345\2\0\1\345\32\0\24\345\4\0"+
    "\3\14\1\0\2\14\1\0\5\14\2\0\1\14\32\0"+
    "\20\14\1\u010e\3\14\4\0\3\14\1\0\2\14\1\0"+
    "\5\14\2\0\1\14\32\0\12\14\1\314\11\14\4\0"+
    "\3\14\1\0\2\14\1\0\1\u010f\4\14\2\0\1\14"+
    "\32\0\24\14\4\0\3\14\1\0\2\14\1\0\5\14"+
    "\2\0\1\14\32\0\16\14\1\u0110\5\14\1\352\1\353"+
    "\1\354\25\352\1\0\50\352\3\0\1\353\22\0\1\u0111"+
    "\53\0\1\353\1\0\1\353\22\0\1\u0111\55\0\1\355"+
    "\22\0\1\u0112\53\0\1\355\1\0\1\355\22\0\1\u0112"+
    "\56\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\3\14\1\u0113\20\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\10\14\1\364\13\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\3\14\1\u0114\20\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\6\14\1\u0115\15\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\4\14\1\u0116\17\14\4\0\3\14\1\0\2\14"+
    "\1\0\3\14\1\u0117\1\14\2\0\1\14\32\0\24\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\2\14\1\u0118\21\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\3\14\1\u0119\20\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\2\14\1\u011a\21\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\6\14\1\u011b\15\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\11\14\1\u011c\12\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\3\14\1\u011d\20\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\21\14\1\u011e\2\14\4\0\3\14\1\0\2\14"+
    "\1\0\3\14\1\u011f\1\14\2\0\1\14\32\0\24\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\235"+
    "\32\0\24\14\4\0\3\14\1\0\2\14\1\0\5\14"+
    "\2\0\1\14\32\0\13\14\1\204\10\14\4\0\3\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\14\32\0\11\14"+
    "\1\u0120\12\14\4\0\3\14\1\0\2\14\1\0\5\14"+
    "\2\0\1\14\32\0\11\14\1\u0121\12\14\6\0\1\u0122"+
    "\2\0\1\u0122\1\0\1\u0122\1\0\1\u0122\1\0\1\u0122"+
    "\35\0\1\u0122\3\0\1\u0122\4\0\1\u0122\1\0\1\u0122"+
    "\14\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\2\14\1\364\21\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\6\14\1\u0123\15\14"+
    "\6\0\1\u0124\2\0\1\u0124\1\0\1\u0124\1\0\1\u0124"+
    "\1\0\1\u0124\35\0\1\u0124\3\0\1\u0124\4\0\1\u0124"+
    "\1\0\1\u0124\14\0\3\14\1\0\2\14\1\0\5\14"+
    "\2\0\1\14\32\0\11\14\1\u0125\12\14\4\0\3\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\14\32\0\11\14"+
    "\1\u0106\12\14\26\0\1\u0126\100\0\1\u0127\56\0\3\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\14\32\0\1\u0128"+
    "\23\14\4\0\3\14\1\0\2\14\1\0\5\14\2\0"+
    "\1\14\32\0\4\14\1\u0129\17\14\4\0\3\14\1\0"+
    "\2\14\1\0\5\14\2\0\1\14\32\0\2\14\1\u012a"+
    "\21\14\4\0\3\14\1\0\2\14\1\0\1\204\4\14"+
    "\2\0\1\14\32\0\24\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\10\14\1\u012b\13\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\14"+
    "\32\0\10\14\1\u012c\13\14\4\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\10\14\1\u012d\13\14"+
    "\6\0\1\u0122\1\0\2\u0122\1\0\1\u0122\1\0\1\u0122"+
    "\1\0\1\u0122\1\220\1\323\2\0\1\215\30\0\1\u0122"+
    "\3\0\1\u0122\4\0\1\u0122\1\0\1\u0122\14\0\3\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\14\32\0\13\14"+
    "\1\314\10\14\6\0\1\u0124\1\0\2\u0124\1\0\1\u0124"+
    "\1\0\1\u0124\1\0\1\u0124\1\243\1\340\2\0\1\241"+
    "\30\0\1\u0124\3\0\1\u0124\4\0\1\u0124\1\0\1\u0124"+
    "\36\0\1\331\101\0\1\260\55\0\3\14\1\0\2\14"+
    "\1\0\5\14\2\0\1\14\32\0\4\14\1\u012e\17\14"+
    "\4\0\3\14\1\0\2\14\1\0\5\14\2\0\1\u012f"+
    "\32\0\24\14\4\0\3\14\1\0\2\14\1\0\5\14"+
    "\2\0\1\14\32\0\2\14\1\204\21\14\4\0\3\14"+
    "\1\0\2\14\1\0\5\14\2\0\1\14\32\0\11\14"+
    "\1\u0130\12\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\1\11\12\1\1\11\1\1\2\11"+
    "\3\1\5\11\1\1\2\11\4\1\1\11\3\1\4\11"+
    "\17\1\1\11\4\1\1\11\1\1\2\0\2\11\3\1"+
    "\1\0\22\1\14\11\11\1\1\11\1\0\25\1\2\11"+
    "\6\1\1\11\2\0\1\1\1\11\1\1\2\11\14\1"+
    "\1\11\1\0\52\1\1\11\1\1\1\0\12\1\1\11"+
    "\1\0\11\1\4\0\33\1\1\0\2\1\1\0\3\1"+
    "\2\0\23\1\2\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _RustLexer() {
    this((java.io.Reader)null);
  }
  /**
    * '#+' stride demarking start/end of raw string/byte literal
    */
  private int zzShaStride = -1;

  /**
    * Dedicated storage for starting position of some previously successful
    * match
    */
  private int zzPostponedMarkedPos = -1;

  /**
    * Dedicated nested-comment level counter
    */
  private int zzNestedCommentLevel = 0;
  IElementType imbueBlockComment() {
      assert(zzNestedCommentLevel == 0);
      yybegin(INITIAL);

      zzStartRead = zzPostponedMarkedPos;
      zzPostponedMarkedPos = -1;

      if (yylength() >= 3) {
          if (yycharat(2) == '!') {
              return INNER_BLOCK_DOC_COMMENT;
          } else if (yycharat(2) == '*' && (yylength() == 3 || yycharat(3) != '*' && yycharat(3) != '/')) {
              return OUTER_BLOCK_DOC_COMMENT;
          }
      }

      return BLOCK_COMMENT;
  }

  IElementType imbueRawLiteral() {
      yybegin(INITIAL);

      zzStartRead = zzPostponedMarkedPos;
      zzShaStride = -1;
      zzPostponedMarkedPos = -1;

      return yycharat(0) == 'b' ? RAW_BYTE_STRING_LITERAL : RAW_STRING_LITERAL;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RustLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case IN_BLOCK_COMMENT: {
              zzNestedCommentLevel = 0; return imbueBlockComment();
            }  // fall though
            case 305: break;
            case IN_LIFETIME_OR_CHAR: {
              yybegin(INITIAL); return BAD_CHARACTER;
            }  // fall though
            case 306: break;
            case IN_RAW_LITERAL: {
              return imbueRawLiteral();
            }  // fall though
            case 307: break;
            case IN_RAW_LITERAL_SUFFIX: {
              return imbueRawLiteral();
            }  // fall though
            case 308: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(INITIAL); yypushback(1);
            } 
            // fall through
          case 108: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 109: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 110: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 111: break;
          case 5: 
            { return MINUS;
            } 
            // fall through
          case 112: break;
          case 6: 
            { return UNDERSCORE;
            } 
            // fall through
          case 113: break;
          case 7: 
            { return INTEGER_LITERAL;
            } 
            // fall through
          case 114: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 115: break;
          case 9: 
            { yybegin(IN_LIFETIME_OR_CHAR); yypushback(1);
            } 
            // fall through
          case 116: break;
          case 10: 
            { return LBRACE;
            } 
            // fall through
          case 117: break;
          case 11: 
            { return RBRACE;
            } 
            // fall through
          case 118: break;
          case 12: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 119: break;
          case 13: 
            { return DIV;
            } 
            // fall through
          case 120: break;
          case 14: 
            { return EXCL;
            } 
            // fall through
          case 121: break;
          case 15: 
            { return SHA;
            } 
            // fall through
          case 122: break;
          case 16: 
            { return LBRACK;
            } 
            // fall through
          case 123: break;
          case 17: 
            { return RBRACK;
            } 
            // fall through
          case 124: break;
          case 18: 
            { return LPAREN;
            } 
            // fall through
          case 125: break;
          case 19: 
            { return RPAREN;
            } 
            // fall through
          case 126: break;
          case 20: 
            { return COLON;
            } 
            // fall through
          case 127: break;
          case 21: 
            { return SEMICOLON;
            } 
            // fall through
          case 128: break;
          case 22: 
            { return COMMA;
            } 
            // fall through
          case 129: break;
          case 23: 
            { return EQ;
            } 
            // fall through
          case 130: break;
          case 24: 
            { return PLUS;
            } 
            // fall through
          case 131: break;
          case 25: 
            { return OR;
            } 
            // fall through
          case 132: break;
          case 26: 
            { return AND;
            } 
            // fall through
          case 133: break;
          case 27: 
            { return LT;
            } 
            // fall through
          case 134: break;
          case 28: 
            { return XOR;
            } 
            // fall through
          case 135: break;
          case 29: 
            { return MUL;
            } 
            // fall through
          case 136: break;
          case 30: 
            { return REM;
            } 
            // fall through
          case 137: break;
          case 31: 
            { return GT;
            } 
            // fall through
          case 138: break;
          case 32: 
            { return Q;
            } 
            // fall through
          case 139: break;
          case 33: 
            { return AT;
            } 
            // fall through
          case 140: break;
          case 34: 
            { return DOLLAR;
            } 
            // fall through
          case 141: break;
          case 35: 
            { 
            } 
            // fall through
          case 142: break;
          case 36: 
            { yybegin(INITIAL); return CHAR_LITERAL;
            } 
            // fall through
          case 143: break;
          case 37: 
            { int shaExcess = yylength() - 1 - zzShaStride;
    if (shaExcess >= 0) {
      yybegin(IN_RAW_LITERAL_SUFFIX);
      yypushback(shaExcess);
    }
            } 
            // fall through
          case 144: break;
          case 38: 
            { yypushback(1); return imbueRawLiteral();
            } 
            // fall through
          case 145: break;
          case 39: 
            { return imbueRawLiteral();
            } 
            // fall through
          case 146: break;
          case 40: 
            { return MINUSEQ;
            } 
            // fall through
          case 147: break;
          case 41: 
            { return ARROW;
            } 
            // fall through
          case 148: break;
          case 42: 
            { return FLOAT_LITERAL;
            } 
            // fall through
          case 149: break;
          case 43: 
            { return DOTDOT;
            } 
            // fall through
          case 150: break;
          case 44: 
            { return FN;
            } 
            // fall through
          case 151: break;
          case 45: 
            { return BYTE_LITERAL;
            } 
            // fall through
          case 152: break;
          case 46: 
            { return BYTE_STRING_LITERAL;
            } 
            // fall through
          case 153: break;
          case 47: 
            { return EOL_COMMENT;
            } 
            // fall through
          case 154: break;
          case 48: 
            { return DIVEQ;
            } 
            // fall through
          case 155: break;
          case 49: 
            { yybegin(IN_BLOCK_COMMENT); yypushback(2);
            } 
            // fall through
          case 156: break;
          case 50: 
            { return EXCLEQ;
            } 
            // fall through
          case 157: break;
          case 51: 
            { return COLONCOLON;
            } 
            // fall through
          case 158: break;
          case 52: 
            { return EQEQ;
            } 
            // fall through
          case 159: break;
          case 53: 
            { return FAT_ARROW;
            } 
            // fall through
          case 160: break;
          case 54: 
            { return PLUSEQ;
            } 
            // fall through
          case 161: break;
          case 55: 
            { return OREQ;
            } 
            // fall through
          case 162: break;
          case 56: 
            { return ANDEQ;
            } 
            // fall through
          case 163: break;
          case 57: 
            { return XOREQ;
            } 
            // fall through
          case 164: break;
          case 58: 
            { return MULEQ;
            } 
            // fall through
          case 165: break;
          case 59: 
            { return REMEQ;
            } 
            // fall through
          case 166: break;
          case 60: 
            { return AS;
            } 
            // fall through
          case 167: break;
          case 61: 
            { yybegin(IN_RAW_LITERAL);
                                    zzPostponedMarkedPos = zzStartRead;
                                    zzShaStride          = yylength() - 2;
            } 
            // fall through
          case 168: break;
          case 62: 
            { return IF;
            } 
            // fall through
          case 169: break;
          case 63: 
            { return IN;
            } 
            // fall through
          case 170: break;
          case 64: 
            { return RESERVED_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 65: 
            { if (zzNestedCommentLevel++ == 0)
              zzPostponedMarkedPos = zzStartRead;
            } 
            // fall through
          case 172: break;
          case 66: 
            { if (--zzNestedCommentLevel == 0)
              return imbueBlockComment();
            } 
            // fall through
          case 173: break;
          case 67: 
            { yybegin(INITIAL); return QUOTE_IDENTIFIER;
            } 
            // fall through
          case 174: break;
          case 68: 
            { yybegin(INITIAL); return SHEBANG_LINE;
            } 
            // fall through
          case 175: break;
          case 69: 
            { yybegin(INITIAL); yypushback(1); return SHEBANG_LINE;
            } 
            // fall through
          case 176: break;
          case 70: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return FLOAT_LITERAL;
            } 
            // fall through
          case 177: break;
          case 71: 
            { return DOTDOTDOT;
            } 
            // fall through
          case 178: break;
          case 72: 
            { return DOTDOTEQ;
            } 
            // fall through
          case 179: break;
          case 73: 
            { return FOR;
            } 
            // fall through
          case 180: break;
          case 74: 
            { return BOX;
            } 
            // fall through
          case 181: break;
          case 75: 
            { yybegin(IN_RAW_LITERAL);
                                    zzPostponedMarkedPos = zzStartRead;
                                    zzShaStride          = yylength() - 3;
            } 
            // fall through
          case 182: break;
          case 76: 
            { return USE;
            } 
            // fall through
          case 183: break;
          case 77: 
            { return OUTER_EOL_DOC_COMMENT;
            } 
            // fall through
          case 184: break;
          case 78: 
            { return INNER_EOL_DOC_COMMENT;
            } 
            // fall through
          case 185: break;
          case 79: 
            { return REF;
            } 
            // fall through
          case 186: break;
          case 80: 
            { return LET;
            } 
            // fall through
          case 187: break;
          case 81: 
            { return MOD;
            } 
            // fall through
          case 188: break;
          case 82: 
            { return MUT;
            } 
            // fall through
          case 189: break;
          case 83: 
            { return PUB;
            } 
            // fall through
          case 190: break;
          case 84: 
            { return SELF;
            } 
            // fall through
          case 191: break;
          case 85: 
            { return BOOL_LITERAL;
            } 
            // fall through
          case 192: break;
          case 86: 
            { return TYPE_KW;
            } 
            // fall through
          case 193: break;
          case 87: 
            { return LOOP;
            } 
            // fall through
          case 194: break;
          case 88: 
            { return IMPL;
            } 
            // fall through
          case 195: break;
          case 89: 
            { return ELSE;
            } 
            // fall through
          case 196: break;
          case 90: 
            { return ENUM;
            } 
            // fall through
          case 197: break;
          case 91: 
            { return MOVE;
            } 
            // fall through
          case 198: break;
          case 92: 
            { return CSELF;
            } 
            // fall through
          case 199: break;
          case 93: 
            { return BREAK;
            } 
            // fall through
          case 200: break;
          case 94: 
            { return SUPER;
            } 
            // fall through
          case 201: break;
          case 95: 
            { return TRAIT;
            } 
            // fall through
          case 202: break;
          case 96: 
            { return CONST;
            } 
            // fall through
          case 203: break;
          case 97: 
            { return CRATE;
            } 
            // fall through
          case 204: break;
          case 98: 
            { return MATCH;
            } 
            // fall through
          case 205: break;
          case 99: 
            { return MACRO_KW;
            } 
            // fall through
          case 206: break;
          case 100: 
            { return WHILE;
            } 
            // fall through
          case 207: break;
          case 101: 
            { return WHERE;
            } 
            // fall through
          case 208: break;
          case 102: 
            { return UNSAFE;
            } 
            // fall through
          case 209: break;
          case 103: 
            { return STATIC;
            } 
            // fall through
          case 210: break;
          case 104: 
            { return STRUCT;
            } 
            // fall through
          case 211: break;
          case 105: 
            { return RETURN;
            } 
            // fall through
          case 212: break;
          case 106: 
            { return EXTERN;
            } 
            // fall through
          case 213: break;
          case 107: 
            { return CONTINUE;
            } 
            // fall through
          case 214: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
