/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.rust.devkt.lang.doc.lexer;

import org.jetbrains.kotlin.com.intellij.lexer.FlexLexer;
import org.jetbrains.kotlin.com.intellij.psi.tree.IElementType;

import static org.jetbrains.kotlin.com.intellij.psi.TokenType.BAD_CHARACTER;
import static org.jetbrains.kotlin.com.intellij.psi.TokenType.WHITE_SPACE;
import static org.rust.devkt.lang.doc.psi.RsDocElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>RustDocHighlightingLexer.flex</tt>
 */
public class _RustDocHighlightingLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BLOCK = 2;
  public static final int IN_EOL = 4;
  public static final int IN_DOC_DATA = 6;
  public static final int IN_DOC_DATA_DEEP = 8;
  public static final int IN_CODE_FENCE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\2\0\1\2\22\0\1\17\1\16\1\0\1\4\4\0\1\10\1\11\1\15\4\0\1\14\12"+
    "\0\1\12\40\0\1\5\1\7\1\6\2\0\1\13\35\0\1\20\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\1\1\3\3\1\4\1\1\2\5"+
    "\1\2\1\6\1\7\2\10\4\7\3\11\1\12\1\13"+
    "\3\0\1\14\1\6\1\14\1\0\1\15\2\0\1\16"+
    "\1\17\4\0\1\4\1\6\1\20\2\0\1\21\1\15"+
    "\1\16\2\22\1\23\1\6\1\15\2\0\1\24\1\0"+
    "\1\21\1\0\1\16\1\6\1\15\1\24\1\15\1\0"+
    "\1\24\1\15\1\21\1\6\1\0\1\21\1\15\1\24"+
    "\1\21\2\15\1\0\1\24\1\21\1\24\1\21\1\15"+
    "\1\21\1\15\2\24\1\15\1\21\1\24\1\15\1\21"+
    "\1\15\1\24\1\15\1\21\1\24\1\15\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\21\0\42\0\63\0\104\0\125\0\146\0\146"+
    "\0\167\0\210\0\146\0\167\0\231\0\252\0\273\0\146"+
    "\0\167\0\314\0\335\0\146\0\146\0\356\0\377\0\u0110"+
    "\0\u0121\0\u0132\0\146\0\u0143\0\u0154\0\146\0\146\0\u0165"+
    "\0\252\0\u0176\0\146\0\u0187\0\u0198\0\377\0\u01a9\0\u01ba"+
    "\0\u01cb\0\u01dc\0\146\0\u0121\0\u01ed\0\u01fe\0\u020f\0\146"+
    "\0\u0220\0\u0198\0\u0231\0\u0242\0\u0253\0\u0264\0\u0275\0\u0286"+
    "\0\146\0\146\0\u0297\0\146\0\u02a8\0\u02b9\0\146\0\u02ca"+
    "\0\u02db\0\u0286\0\u0286\0\u02ec\0\u0231\0\u0242\0\u02fd\0\u030e"+
    "\0\377\0\u031f\0\u0330\0\u0341\0\u0352\0\u0363\0\u0374\0\u02ca"+
    "\0\u0385\0\u0396\0\u0242\0\u03a7\0\u0231\0\u03b8\0\u0253\0\u03c9"+
    "\0\u0253\0\u03da\0\u0352\0\u0352\0\u0363\0\u03eb\0\u03fc\0\u02db"+
    "\0\u0385\0\u040d\0\u041e\0\u03c9\0\u0363\0\u042f\0\u0385\0\u040d"+
    "\0\u040d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\10\10\7\1\12\2\7\1\10"+
    "\1\7\2\13\1\14\1\10\10\13\1\15\1\16\1\13"+
    "\1\10\1\13\1\7\1\10\1\11\1\10\10\7\1\17"+
    "\2\7\1\10\1\7\2\20\1\21\1\22\1\23\12\20"+
    "\1\22\1\20\1\24\1\25\1\26\1\22\1\24\1\27"+
    "\5\24\1\30\1\24\1\31\1\24\1\22\1\32\1\33"+
    "\1\25\1\26\10\33\1\34\4\33\1\35\22\0\1\10"+
    "\33\0\1\36\1\37\20\0\1\40\17\0\1\24\1\41"+
    "\17\0\1\42\7\0\1\22\13\0\1\22\2\0\2\43"+
    "\1\0\1\44\12\0\1\45\2\0\1\25\17\0\1\46"+
    "\2\0\3\46\1\47\1\50\11\46\1\51\2\0\10\51"+
    "\1\52\5\51\14\0\1\53\1\54\23\0\1\55\13\0"+
    "\1\56\25\0\1\57\15\0\2\60\16\0\1\60\1\0"+
    "\1\60\3\0\2\43\1\0\1\61\12\0\1\45\1\0"+
    "\1\62\2\0\16\62\5\0\1\63\2\0\1\64\1\0"+
    "\1\65\6\0\1\46\2\0\3\46\1\66\1\50\11\46"+
    "\1\51\2\0\10\51\1\67\5\51\13\0\1\70\25\0"+
    "\1\71\13\0\1\72\25\0\1\72\1\0\2\43\1\0"+
    "\1\73\12\0\1\45\1\0\1\63\2\0\3\63\1\74"+
    "\1\75\11\63\1\64\2\0\4\64\1\76\1\0\1\77"+
    "\7\64\1\65\2\0\16\65\1\46\2\0\3\46\1\47"+
    "\1\50\1\100\1\46\1\101\6\46\13\0\1\102\5\0"+
    "\1\51\2\0\10\51\1\103\5\51\1\0\2\43\1\0"+
    "\1\104\12\0\1\45\1\0\1\63\2\0\3\63\1\105"+
    "\1\75\11\63\1\64\2\0\4\64\1\76\1\64\1\106"+
    "\7\64\1\100\2\0\3\100\1\107\1\110\1\46\1\111"+
    "\7\100\1\101\2\0\3\101\1\112\1\113\11\101\1\0"+
    "\2\43\1\0\1\114\12\0\1\45\1\0\1\64\2\0"+
    "\2\64\1\115\1\64\1\76\1\64\1\77\1\116\6\64"+
    "\1\100\2\0\3\100\1\117\1\110\1\100\1\120\7\100"+
    "\1\65\2\0\2\65\1\121\2\65\1\116\10\65\1\101"+
    "\2\0\3\101\1\122\1\113\11\101\1\0\2\43\14\0"+
    "\1\45\1\0\1\115\2\0\3\115\1\123\1\124\1\63"+
    "\1\125\7\115\1\116\2\0\4\116\1\126\1\65\1\127"+
    "\7\116\1\100\2\0\3\100\1\107\1\110\1\100\1\111"+
    "\1\130\6\100\1\121\2\0\3\121\1\131\1\132\11\121"+
    "\1\101\2\0\3\101\1\112\1\113\1\130\10\101\1\115"+
    "\2\0\3\115\1\133\1\124\1\115\1\134\7\115\1\116"+
    "\2\0\4\116\1\126\1\116\1\135\7\116\1\130\2\0"+
    "\3\130\1\136\1\137\1\101\1\140\7\130\1\121\2\0"+
    "\3\121\1\141\1\132\11\121\1\116\2\0\2\116\1\142"+
    "\1\116\1\126\1\116\1\127\7\116\1\130\2\0\3\130"+
    "\1\143\1\137\1\130\1\144\7\130\1\142\2\0\3\142"+
    "\1\145\1\146\1\121\1\147\7\142\1\130\2\0\3\130"+
    "\1\136\1\137\1\130\1\140\7\130\1\142\2\0\3\142"+
    "\1\150\1\146\1\142\1\151\7\142";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1088];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\11\2\1\1\11\4\1\1\11\3\1\2\11"+
    "\5\1\1\11\2\1\2\11\3\0\1\11\2\1\1\0"+
    "\1\1\2\0\1\1\1\11\4\0\1\11\2\1\2\0"+
    "\4\1\2\11\1\1\1\11\2\0\1\11\1\0\1\1"+
    "\1\0\5\1\1\0\4\1\1\0\6\1\1\0\25\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private final int MAIN_STATE;
  private int DATA_STATE = IN_DOC_DATA;
  private char CODE_FENCE_DELIM = '\0';

  private boolean isLastToken() {
    return zzMarkedPos == zzEndRead;
  }

  private void trimTrailingAsterisks() {
    int i = yylength() - 1;
    char ch = yycharat(i);

    // Trim trailing *****/ if we are at the end of block doc comment
    if (i >= 1 && MAIN_STATE == IN_BLOCK && isLastToken() && ch == '/' && yycharat(i - 1) == '*') {
      i--; // consume '/'
      ch = yycharat(i);
      while (i > 0 && ch == '*') {
        ch = yycharat(--i);
      }
    }

    yypushback(yylength() - i - 1);
  }

  private void docHeadingTrimRight() {
    trimTrailingAsterisks();

    int i = yylength() - 1;
    char ch = yycharat(i);

    // Trim trailing whitespace
    // We don't have to check whether i underflows over 0,
    // because we have guarantee that there is at least one '#'
    while (ch == ' ' || ch == '\t') {
      ch = yycharat(--i);
    }

    yypushback(yylength() - i - 1);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RustDocHighlightingLexer(java.io.Reader in, boolean isBlock) {
    MAIN_STATE = isBlock ? IN_BLOCK : IN_EOL;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                DATA_STATE = IN_DOC_DATA; CODE_FENCE_DELIM = '\0'; return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 21: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 22: break;
          case 3: 
            { yybegin(DATA_STATE); yypushback(1);
            } 
            // fall through
          case 23: break;
          case 4: 
            { yybegin(DATA_STATE); return DOC_TEXT;
            } 
            // fall through
          case 24: break;
          case 5: 
            { yybegin(IN_DOC_DATA_DEEP); yypushback(1);
            } 
            // fall through
          case 25: break;
          case 6: 
            { if (isLastToken()) { return DOC_HEADING; }
                                      else { yybegin(IN_DOC_DATA_DEEP); return DOC_TEXT; }
            } 
            // fall through
          case 26: break;
          case 7: 
            { return DOC_TEXT;
            } 
            // fall through
          case 27: break;
          case 8: 
            { yybegin(MAIN_STATE); return WHITE_SPACE;
            } 
            // fall through
          case 28: break;
          case 9: 
            { return DOC_CODE_FENCE;
            } 
            // fall through
          case 29: break;
          case 10: 
            { assert MAIN_STATE == IN_EOL;   yybegin(IN_EOL);   yypushback(2);
            } 
            // fall through
          case 30: break;
          case 11: 
            { assert MAIN_STATE == IN_BLOCK; yybegin(IN_BLOCK); yypushback(2);
            } 
            // fall through
          case 31: break;
          case 12: 
            { yybegin(IN_DOC_DATA_DEEP); yypushback(1); return DOC_HEADING;
            } 
            // fall through
          case 32: break;
          case 13: 
            { return DOC_REF_LINK;
            } 
            // fall through
          case 33: break;
          case 14: 
            { return DOC_CODE_SPAN;
            } 
            // fall through
          case 34: break;
          case 15: 
            { if (MAIN_STATE == IN_BLOCK && isLastToken()) { yybegin(MAIN_STATE); yypushback(yylength()); }
        else { return DOC_TEXT; }
            } 
            // fall through
          case 35: break;
          case 16: 
            { yybegin(IN_DOC_DATA_DEEP); docHeadingTrimRight(); return DOC_HEADING;
            } 
            // fall through
          case 36: break;
          case 17: 
            { return DOC_LINK_REF_DEF;
            } 
            // fall through
          case 37: break;
          case 18: 
            { CODE_FENCE_DELIM = yycharat(0);
                          DATA_STATE = IN_CODE_FENCE;
                          yybegin(IN_CODE_FENCE);
                          return DOC_CODE_FENCE;
            } 
            // fall through
          case 38: break;
          case 19: 
            { if (yycharat(0) == CODE_FENCE_DELIM) { DATA_STATE = IN_DOC_DATA; yybegin(IN_DOC_DATA_DEEP); }
        return DOC_CODE_FENCE;
            } 
            // fall through
          case 39: break;
          case 20: 
            { return DOC_INLINE_LINK;
            } 
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
